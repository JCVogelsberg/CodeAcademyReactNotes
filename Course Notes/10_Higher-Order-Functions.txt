Day 10 - Higher-Order Functions
-------------------------

- Functions can behave like any other type of data in JavaScript

- A higher-order function is a function that either accepts functions as
  parameters, returns a function, or both!
- Functions can be passed to other functions as parameters
- Callback Functions: 
  * Functions that get passed in as parameters and invoked  
  * Callback functions do NOT have parentheses (parentheses = invoking)


- Assigning functions to variables:

Example:
  const thisFunctionNameIsEntirelyTooGoddamnLong = () => {
      console.log('Do something.');
  };

  const shorter = thisFunctionNameIsEntirelyTooGoddamnLong;
  shorter();

  * This function call is shorter!
  * Can be called with parentheses containing parameters
  * Assigning it to variable does NOT feature parentheses (just want value of
  function, not the value it returns)



---------------- SECTION REVIEW ----------------

- Think about functions as data

- Abstraction allows us to write complicated code in a way that's easy to reuse, debug, and understand for human readers

- We can work with functions the same way we would any other type of data including reassigning them to new variables

- JS functions are first-class objects, so they have properties and methods like any object

- Functions can be passed into other functions as parameters

- A higher-order function is a function that either accepts functions as parameters, returns a function, or both





