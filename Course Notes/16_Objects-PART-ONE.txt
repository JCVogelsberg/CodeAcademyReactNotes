Day 16 - Objects
-------------------------

- JS objects are containers storing related data and functionality
-  Many JS components are actually objects under the hood, and even the parts
that aren't (like strings or numbers) can still act like objects in some instances
- Six of the seven JS data types are primitive; only objects are complex


---------------- Object Literals ----------------
- An object literal is composed of comma-separated key-value pairs surrounded
by curly braces.
- Objects can be assigned to variables just like any JS type

Example:
  let objectName = {}; // objectName is an empty objects

- Data in a JS object is organized into key-value pairs
Example:
  let objectName = {
    'Fuel Type': 'deuterium',   // <--- in quotes because it has a space
    color: 'silver',
    armament: 'photon torpedoes'
  };


---------------- Accessing Properties ----------------
- There are two ways to access data in an object: dot notation & bracket
notation
- Bracket notation must be used to access keys that contain:
  * numbers
  * spaces
  * special characters
- Bracket notation can also use a variable inside the brackets to
select the keys of an object


Dot notation:
  let spaceship = {
    homePlanet: 'Earth'
  };
  spaceship.homePlanet;    // Returns 'Earth'


Bracket Notation:
  let spaceship = {
    'Fuel Type': 'Turbo Fuel'
  };
  spaceship['Active Duty'];   // Returns true


---------------- Property Assignment ----------------
- Objects are 'mutable' = they can be updated after they're created
- To add new key-value pairs, or change an existing property:
  * dot notation
  * bracket notation
  * ...both using the assignment operator:
    spaceship.color = 'gold';
    spaceship[color] = 'gold';

- Deleting properties:

  let spaceship = {
    'Secret Mission' : 'Discover life outside of Earth.'
  };
  delete spaceship['Secret Mission'];


---------------- Methods ----------------
- Method: A property with a function as its value.
- Examples:

  'console.log();'
      console --->  a global javascript object
      .log ------>  a method on 'console'

  'Math.floor();'
      Math ------>  a global javascript object
      .floor ---->  a method on 'Math'

- Two ways of declaring functions in an object:

  let alienMsg = {
    retreat() {
      console.log('Take me to your leader!');
    }
  };

  let alienMsg = {
    retreat: function () {
      console.log('Take me to your leader!');
    }
  };


---------------- Nesting Objects ----------------
- An object might have another object as a property which in turn could have a
property that's an array of even more objects!
-

Example:

  const spaceship = {
    engine: {
      yearBuilt: 2018,
      fuel: 'deuterium'
    },

    crew: {
      captain: 'Doug',
      boatswain: 'Eowyn',
      purser: 'Steve-O'
    }
  };
  spaceship.engine['yearBuilt']; // Returns 2018


---------------- Pass by Reference ----------------
- Passed by Reference: When we pass a variable assigned to an object into a
function as an argument, the computer interprets the parameter name as pointing
to the space in memory holding that object.

- Result: functions which change object properties actually mutate the object
permanently (even when the object is assigned to a const variable).

- Takes an object as a parameter (see below)

Example:
  const myDog = {
    color : 'brindle'
  };

  let paintIt = obj => {
    obj.color = 'earwax yellow'
  };

  paintIt(myDog);
  console.log(myDog.color); // Returns 'earwax yellow'


---------------- Looping Through Objects ----------------
- Key-value pairs in objects aren't ordered, so you have to use 'for...in'
syntax to loop through them
- 'For...in' will execute a given block of code for each property in an object.

Example:
  for ( let param in spaceship.crew ) {
  	console.log(
      `${param}: ${spaceship.crew[param].name}`
    )
  }

  for (let param in outerObject.innerObject) {
    console.log(
      `${outerObject.innerObject[param].propertyName}:
       ${outerObject.innerObject[param].differentPropertyName}`
    )
  };




//.
