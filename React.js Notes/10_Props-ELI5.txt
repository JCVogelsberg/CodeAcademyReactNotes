React Props ELI5
-------------------------

A React Component (template) is like a function that returns some DOM. It can be called/rendered/executed multiple times. The props are the function arguments. i.e. if you need to parameterize some aspect of the rendered template… the props are the parameters.

e.g. If you have a blog post Component (template) you likely don't want it to render static content (we want to reuse the component for different blog posts), so you want to pass in the title and blog-content as data, we have to paramaterize the blog-post title and content… so these would be props.

As you may know, React doesn't just render a template once, you can think of it as continually rendering your template and updating the page accordingly (but optimised, so not as heavyweight as it sounds). Sticking with the Component is a function that returns DOM analogy, you control/vary the parameters that are passed in to the component over time, the component is called/rendered/executed again and again, but with new parameters (props). Just like regular functions, components can be nested, and when a component is re-rendered with new props, it, in turn, re-renders it's child components with new values, etc. In this way very dynamic pages can be rendered.

Alongside props, there is component-state, allowing a component to have an internal reason to update, and return a new value (a chunk of DOM that replaces the previous output), even if it wasn't called again with new arguments (props).

EDIT: quite difficult to ELI5

-------------------------

To add, render props are possible because in Javascript, functions are first-class objects. This allows you to pass functions to other functions. Array.prototype.map is similar to a React component with a render prop.

  const renderProp = v => v;
  [1, 2, 3].map(renderProp);      // [1, 2, 3]

  const anotherRenderProp = v => v * 2;
  [1, 2, 3].map(anotherRenderProp);      // [2, 4, 6]


-------------------------
