Day 12 - This.state 
-------------------------
- Dynamic information: information that can change
- React components will often need dynamic information in order to render


---------------- Props vs. State ----------------
- Two ways for a component to get dynamic info: 
  * props
  * state

- Props: 
  * passed in from the outside. 
  * A component cannot update its own props
  * Used to store info that can be changed, but only by a DIFFERENT COMPONENT

- State: 
  * not passed in from the outside
  * A component decides its own state
  * A component CAN update its own state
  * Used to store info that the component itself can change
  
- Besides props and state, every value used in a component should always stay exactly the same


---------------- Setting Initial State ----------------
- To make a component have state:
  * Give the component a state property
  * This property should be declared inside of a constructor method


Example:

  class Example extends React.Component {
    constructor(props) {
      super(props);
      this.state = { mood: 'decent' };
    }

    render() {
      return <div></div>;
    }
  }

  <Example />   <--- has a state, equal to { mood: 'decent' }
  

- constructor: 
  * Function that when called, creates a new object and assigns it to the 'this' in the constructor function call

- super:
  * a function used to call the constructor of the parent class & access functions on an object's parent class
  * React components always have to call super in their constructors

- this.state:
  * <Example /> has a state, and its state is equal to { mood: 'decent' }


---------------- Access a Component's State ----------------
- To read a component's state, use the expression 'this.state.name-of-property'
- Just like 'this.props', you can use 'this.state' from any property defined inside of a component class's body


---------------- Updating State ---------------- 
- A component can read its own state
- A component can also change its own state, by calling the function 'this.setState()'
- this.setState() takes two arguments:
  * An object that will update the component's state
  * A callback (you basically never need the callback)

Example:

  Before:
  {
    mood:   'great',
    hungry: false
  }

  Update:
  this.setState({ hungry: true });

  After:
  {
    mood:   'great',
    hungry: true
  }


---------------- Calling this.setState from Another Function ----------------
- The most common way to call 'this.setState()' is to call a custom function that wraps a this.setState() call. 

Example:
  {
    this.state = { weather: 'sunny' };
    this.makeSomeFog = this.makeSomeFog.bind(this);
  }

  makeSomeFog() {
    this.setState({
      weather: 'foggy'
    });
  }  

- The line 'this.makeSomeFog = this.makeSomeFog.bind(this);' 

  * If a method will be used as an event handler, you must bind it
  * This is necessary because makeSomeFog()'s body contains the word 'this'
  * Event handlers in JS will strip away the 'this' unless it is bound
  * It should go in the constructor function


---------------- Live Updates! ----------------
- Any time that you call 'this.setState()', .render() is AUTOMATICALLY called as soon as the state has changed!
- Think of 'this.setState()' as actually being two things: 
  * this.setState()
  * .render(), called immediately after

- That is why you can't call 'this.setState()' from inside of the '.render()' method!






