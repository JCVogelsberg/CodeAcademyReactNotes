Day 17 - RESTful Systems 
-------------------------

- REST: 
  * REpresentational State Transfer
  * an architectural style for providing standards between computer systems on the web
  * RESTful systems are stateless & separate the concerns of client and server

- In the REST architectural style, implementation of the client & implementation of the server can be done independently, so the code on the client side can be changed at any time without affecting the operation of the server, and vice versa



---------------- Statelessness ----------------
-  RESTful systems are stateless
  * the server doesn't need to know what state the client is in & vice versa
  * Both the server & the client can understand any message received, even without seeing previous messages. 
  * This constraint of statelessness is enforced through the use of resources, rather than commands. 

- Resources:
  * the nouns of the Web
  * they describe any object, document, or thing you need to store or send

- Because REST systems interact through standard operations on resources, they do not rely on the implementation of interfaces.

- These constraints help RESTful applications:
  * achieve reliability, quick performance, & scalability
  * components can be managed, updated, & reused without affecting the system as a whole, even during operation of the system.


---------------- Making Requests ----------------
- REST requires that a client make a request to the server in order to retrieve or modify data on the server
- A request generally consists of:
  * an HTTP verb (defines what kind of operation to perform)
  * a header, which allows the client to pass along info about the request
  * a path to a resource
  * an optional message body containing data


---------------- HTTP Verbs ----------------  
- 4 basic HTTP verbs used in requests to interact w/ resources in a REST system:
  * GET — retrieve a specific resource (by id) or a collection of resources

  * POST — create a new resource

  * PUT — update a specific resource (by id)

  * DELETE — remove a specific resource by id

More info: https://www.codecademy.com/articles/what-is-crud


---------------- Headers & Accept Parameters ---------------- 
- Accept field:
  * In the header of the request, the client sends the type of content that it is able to receive from the server. 
  
  * it ensures that the server does not send data that cannot be understood or processed by the client. 
  
  * The options for types of content are MIME Types (Multipurpose Internet Mail Extensions)

  * MIME Types, used to specify the content types in the Accept field, consist of a type and a subtype. They are separated by a slash (/).

More info: https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types

Other types and commonly used subtypes:
  * image — image/png, image/jpeg, image/gif
  
  * audio — audio/wav, image/mpeg
  
  * video — video/mp4, video/ogg
  
  * application — application/json, application/pdf, application/xml, application/octet-stream

Example:
  Client accessing a resource with:
  * id 23 
  * in an articles resource on a server 
  ...might send a GET request like this:

//  GET /articles/23
//  Accept: text/html, application/xhtml


- The Accept header field in this case is saying that the client will accept the content in 'text/html' or 'application/xhtml'



---------------- Paths ---------------- 
- Requests must contain a path to a resource that the operation should be performed on
- In RESTful APIs, paths should be designed to help the client know what is going on

- Best Practice: the first part of the path should be the plural form of the resource. This keeps nested paths simple to read and easy to understand.

Example:
  fashionboutique.com/customers/223/orders/12

  ...it's obvious that we are accessing the order with id 12 for the customer with id 223


- Paths should contain the info necessary to locate a resource with the degree of specificity needed. 
- If you are trying to access a single resource, you'll would need to append an id to the path

Example: 
//  GET fashionboutique.com/customers/:id 
  ...retrieves the item in the customers resource with the id specified. 

//  DELETE fashionboutique.com/customers/:id 
  ...deletes the item in the customers resource with the id specified.


---------------- SENDING RESPONSES ---------------- 
- Content Types:
  * When the server is sending a data payload to the client, the server must include a content-type in the header of the response.
  * This content-type header field alerts the client to the type of data it is sending in the response body. 
  * These content types are MIME Types, just as they are in the accept field of the request header. 
  * The content-type that the server sends back in the response should be one of the options that the client specified in the accept field of the request.

Example:
  When a client is accessing a resource with id 23 in an articles resource with this GET Request:

//  GET /articles/23 HTTP/1.1
//  Accept: text/html, application/xhtml

The server might send back the content with the response header:

//  HTTP/1.1 200 (OK)
//  Content-Type: text/html


- Response Codes:
  * Responses from the server contain status codes 
  * There are many, but here are the most common:
  
  200 (OK) - This is the standard response for successful HTTP requests.

  201 (CREATED) - This is the standard response for an HTTP request that resulted in an item being successfully created.

  204 - (NO CONTENT)  This is the standard response for successful HTTP requests, where nothing is being returned in the response body.

  400 - (BAD REQUEST) The request cannot be processed because of bad request syntax, excessive size, or another client error.

  403 - (FORBIDDEN) The client does not have permission to access this resource.

  404 - (NOT FOUND) The resource could not be found at this time. It is possible it was deleted, or does not exist yet.

  500 - (INTERNAL SERVER ERROR) The generic answer for an unexpected failure if there is no more specific information available.  


- For each HTTP verb, there are expected status codes a server should return upon success:
  
  * GET — return 200 (OK)

  * POST — return 201 (CREATED)
  
  * PUT — return 200 (OK)
  
  * DELETE — return 204 (NO CONTENT) If the operation fails, return the most specific status code possible corresponding to the problem that was encountered.


---------------- Examples Of Requests And Responses ---------------- 
- View all customers, the request would look like this:

//  GET http://fashionboutique.com/customers
//  Accept: application/json
  
A possible response header:

//  Status Code: 200 (OK)
//  Content-type: application/json

...followed by the customers data requested in application/json format.


-------------------------

- Create a new customer by posting the data:

//  POST http://fashionboutique.com/customers
//  Body:
//  {
//    “customer”: {
//      “name” = “Scylla Buss”
//      “email” = “scylla.buss@codecademy.org”
//    }
//  }

The server then generates an id for that object and returns it back to the client, with a header like:

//  201 (CREATED)
//  Content-type: application/json


-------------------------

- View a single customer, GET it by specifying that customer’s id:

//  GET http://fashionboutique.com/customers/123
//  Accept: application/json

A possible response header would look like:

//  Status Code: 200 (OK)
//  Content-type: application/json

...followed by the data for the customer resource with id 23 in application/json format.


-------------------------

- Update that customer by _PUT_ting the new data:

//  PUT http://fashionboutique.com/customers/123
//  Body:
//  {
//    “customer”: {
//      “name” = “Scylla Buss”
//      “email” = “scyllabuss1@codecademy.com”
//    }
//  }

A possible response header would have 
//  Status Code: 200 (OK)
to notify the client that the item with id 123 has been modified.


-------------------------

- We can also DELETE that customer by specifying its id:

//  DELETE http://fashionboutique.com/customers/123

The response would have a header containing
//  Status Code: 204 (NO CONTENT)
notifying the client that the item with id 123 has been deleted, and nothing in the body.



---------------- Practice With REST ----------------
- 






