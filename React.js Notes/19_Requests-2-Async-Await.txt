Day 19 - Requests II - Async & Await
-------------------------

- Here are some key points to keep in mind as we walk through the code:
  * Using an async function that will return a promise.
  
  * await can only be used in an async function. await allows a program to run while waiting for a promise to resolve.
  
  * In a try...catch statement, code in the try block will be run and in the event of an exception/error, the code in the catch statement will run.


---------------- Requests II Review ----------------  

 - GET and POST requests can be created a variety of ways.

 - Use AJAX to asynchronously request data from APIs. fetch() and async/await are new functionalities developed in ES6 (promises) and ES8 respectively.

 - Promises are a new type of JavaScript object that represent data that will eventually be returned from a request.

 - fetch() is a web API that can be used to create requests. fetch() will return promises.

 - We can chain .then() methods to handle promises returned by fetch().

 - The .json() method converts a returned promise to a JSON object.

 - async is a keyword that is used to create functions that will return promises.

 - await is a keyword that is used to tell a program to continue moving through the message queue while a promise resolves.

 - await can only be used within functions declared with async.