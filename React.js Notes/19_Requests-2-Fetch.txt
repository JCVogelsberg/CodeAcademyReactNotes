Day 19 - Requests II - Fetch
-------------------------
- How to make AJAX requests with new features available in ES6 and ES7

- Basics:
  * used fetch() to make GET and POST requests.
  * check the status of the responses coming back
  * catch errors that might possibly arise
  * taking successful responses and rendering it on the webpage



---------------- Promises ----------------  
- Promise: An object that handles asynchronous data. 

- A promise has three states:
  * Pending: when a promise is created or waiting for data.
  * Fulfilled: the asynchronous operation was handled successfully.
  * Rejected: the asynchronous operation was unsuccessful.

- Once a promise is fulfilled or rejected, you can chain an additional method to the original promise.


---------------- Fetch ----------------  
- The fetch() function:
  * Creates a request object that contains relevant information that an API needs.
  * Sends that request object to the API endpoint provided.
  * Returns a promise that ultimately resolves to a response object, which contains the status of the promise with information the API sent back.

- renderJsonResponse() is a helper function found in public/helperFunctions.js.


==========================================================

// Boilerplate code for a GET request using fetch() and .then()

  // Information to reach API
  const url = 'https://api.datamuse.com/words';
  const queryParams = '?sl=';

  // AJAX function
  const getSuggestions = () => {
    const wordQuery = inputField.value;
    const endpoint = `${url}${queryParams}${wordQuery}`;
    
    fetch(endpoint).then(response => {
      if (response.ok) {
        return response.json();
      }
      throw new Error('Request failed!');
    }, networkError => {
      console.log(networkError.message)
    }).then(jsonResponse => {
      renderResponse(jsonResponse);
    })
  }

==========================================================

// Boilerplate code for a POST request using fetch() and .then()

  fetch('https://api-to-call.com/endpoint', {
    method: 'POST', 
    body: JSON.stringify({id: '200'})
  }).then(response => {
    if (response.ok) {
      return response.json();
    }
    throw new Error('Request failed!');
  }, networkError => {
  console.log(networkError.message);
  }).then(jsonResponse => {
    return jsonResponse;
  });

