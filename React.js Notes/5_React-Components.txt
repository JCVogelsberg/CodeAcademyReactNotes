Day 5 - React Components
-------------------------
- React component: a small, reusable chunk of code responsible for one job, which often involves rendering HTML
- Component class:
  * Every component must come from a component class.
  * A component class is like a factory that creates components. 
  * If you have a component class, you can use it to produce as many components as you want.

- To make a component class, use a base class from the React library: React.Component
  
Example:
  import React from 'react';  // gets the React library, save as variable 'React'
  import ReactDOM from 'react-dom';  // get methods for dealing with DOM, save as variable 'ReactDOM'
  // 'React' and 'ReactDOM' are both JS objects

  class HurrDurr extends React.Component { // creates 'HurrDurr' component class
    render() {    // render function:  
      return <h1>Hello world</h1>;
    }
  }

  ReactDOM.render(
    <MyComponentClass />, 
    document.getElementById('app')
  );



- React.Component is a JavaScript class
- Your component class will be a subclass of React.Component
- Component class names must be written in UpperCamelCase


---------------- Render Function ----------------
- There is only one property that you have to include in your instructions: a render method.
- Render method: a property whose name is 'render', and whose value is a function
- A render method must contain a return statement (usually returns a JSX expression) 



---------------- Making a React Component ----------------
- Once component class is setup, you can call it (kinda like calling a JS function)
- Create a React component, use a JSX element: <MyComponentClass />
- JSX elements can be either HTML-like, or component instances. 
- JSX uses capitalization to distinguish between the two! 
- That's why component class names must begin with capital letters.








